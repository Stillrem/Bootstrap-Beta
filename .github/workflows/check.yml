name: Build and Package

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  repository_dispatch:
    types: [check-upstream-release-event]

jobs:
  check-for-changes:
    runs-on: macos-latest
    outputs:
      changes_detected: ${{ steps.check_changes.outputs.changes_detected }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Git
        id: check_changes
        run: |
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git config --global user.name "${GITHUB_ACTOR}"
          git remote add upstream https://github.com/RootHide/Bootstrap
          git fetch upstream
          git fetch --all --prune
          git pull --rebase --strategy-option=theirs upstream main
          CHANGE_COUNT=$(git rev-list HEAD...upstream/main --count)
          if [ "$CHANGE_COUNT" -gt 0 ]; then
            echo "New changes detected"
            echo "changes_detected=true" >> $GITHUB_ENV
            echo "changes_detected=true" >> $GITHUB_OUTPUT
          else
            echo "No changes since last build"
            echo "changes_detected=false" >> $GITHUB_ENV
            echo "changes_detected=false" >> $GITHUB_OUTPUT
          fi

  build:
    name: Build RootHide Bootstrap
    runs-on: macos-latest
    needs: check-for-changes
    if: ${{ needs.check-for-changes.outputs.changes_detected == 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Homebrew
        run: bash -c "$(curl -fsSL 'https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh')"

      - name: Install Theos
        run: bash -c "$(curl -fsSL 'https://raw.githubusercontent.com/roothide/theos/master/bin/install-theos')"

      - name: Install make
        run: brew install make

      - name: Setup Theos environment
        run: echo "THEOS=~/theos" >> $GITHUB_ENV

      - name: Set Version from Upstream
        run: |
          git remote add upstream https://github.com/RootHide/Bootstrap || true
          git fetch upstream --tags
          latest_upstream_tag=$(git tag --sort=-v:refname --merged upstream/main | head -n 1)
          echo "Latest upstream tag is $latest_upstream_tag"
          if [[ $latest_upstream_tag =~ ^v?([0-9]+)\.([0-9]+)(\.([0-9]+))? ]]; then
            new_tag="${latest_upstream_tag#v}"
            release_date=$(git log -1 --format=%ad --date=format:%m.%d.%Y $latest_upstream_tag)
            echo "Current version is set to: $new_tag"
            echo "Release date is: $release_date"
          else
            echo "Failed to parse version tag: $latest_upstream_tag"
            exit 1
          fi
          echo "VERSION=${new_tag}" >> $GITHUB_ENV
          echo "RELEASE_DATE=${release_date}" >> $GITHUB_ENV
          echo "new_tag=${new_tag}" >> $GITHUB_ENV
          
      - name: Get release notes from upstream GitHub Release
        id: get_release_notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          latest_upstream_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "Latest upstream tag is $latest_upstream_tag"
          release_data=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/RootHide/Bootstrap/releases/tags/$latest_upstream_tag")
          release_body=$(echo "$release_data" | jq -r .body | sed ':a;N;$!ba;s/\r//g;s/\n/\\n/g')
          echo "Release notes:" $release_body
          echo "release_notes<<EOF" >> $GITHUB_ENV
          echo "$release_body" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Make bootstrap package
        run: gmake -j$(sysctl -n hw.ncpu) package

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: Bootstrap.tipa
          path: ./packages/Bootstrap.tipa

      - name: Delete old release
        uses: dev-drprasad/delete-tag-and-release@v0.2.1
        with:
          delete_release: true
          tag_name: ${{ env.VERSION }}-${{ env.RELEASE_DATE }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Get bootstrap artifact
        uses: actions/download-artifact@v3
        with:
          name: Bootstrap.tipa

      - name: Create new release
        uses: ncipollo/release-action@v1
        with:
          name: Bootstrap_public ${{ env.VERSION }} Release
          body: ${{ env.release_notes }}
          artifacts: "Bootstrap.tipa"
          tag: ${{ env.VERSION }}-${{ env.RELEASE_DATE }}
          token: ${{ secrets.GITHUB_TOKEN }}
