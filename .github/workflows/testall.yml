name: Upstream Release Notifier

on:
  workflow_dispatch:
  schedule:
    - cron: '0 * * * *'

jobs:
  check-upstream-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install axios
        run: npm install axios

      - name: Check for new release
        id: check-release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const axios = require('axios');
            const fs = require('fs');
            const path = require('path');

            const upstreamRepo = 'roothide/Bootstrap';
            const apiURL = `https://api.github.com/repos/${upstreamRepo}/releases/latest`;
            const releaseFilePath = path.join(process.env.GITHUB_WORKSPACE, 'latest_release.txt');
            const markdownTablePath = path.join(process.env.GITHUB_WORKSPACE, 'RELEASES.md');

            async function getLatestRelease() {
              try {
                const response = await axios.get(apiURL);
                const fixedItems = response.data.body.match(/(?<=\bFixed\b\s*.*?)(\d+.*?)(?=\n|$)/gi) || [];
                return {
                  tagName: response.data.tag_name,
                  publishedDate: response.data.published_at,
                  fixedItems: fixedItems.join(', ')
                };
              } catch (error) {
                console.error(`Unable to get latest release: ${error}`);
                return null;
              }
            }

            function generateMarkdownTableRow(data) {
              return `| ${data.tagName} | ${data.publishedDate} | ${data.fixedItems} |`;
            }

            function updateMarkdownTable(filePath, newDataRow) {
              let tableContent = '';
              if (fs.existsSync(filePath)) {
                tableContent = fs.readFileSync(filePath, 'utf8');
              }
              tableContent += `\n${newDataRow}`;
              fs.writeFileSync(filePath, tableContent);
            }

            async function run() {
              const latestReleaseData = await getLatestRelease();
              if (!latestReleaseData) return;

              const { tagName, publishedDate, fixedItems } = latestReleaseData;

              let previousRelease = '';
              if (fs.existsSync(releaseFilePath)) {
                previousRelease = fs.readFileSync(releaseFilePath, 'utf8');
              }

              if (tagName !== previousRelease) {
                const newTableRow = generateMarkdownTableRow({
                  tagName: tagName,
                  publishedDate: publishedDate,
                  fixedItems: fixedItems
                });

                updateMarkdownTable(markdownTablePath, newTableRow);
                fs.writeFileSync(releaseFilePath, tagName);
              }

            }
            run();
