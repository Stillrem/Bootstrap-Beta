name: Upstream Release Notifier

on:
  workflow_dispatch:
  schedule:
    - cron: '0 * * * *'

jobs:
  check-upstream-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install axios
        run: npm install axios

      - name: Check for new release
        id: check-release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const axios = require('axios');
            const fs = require('fs');
            const path = require('path');

            const upstreamRepo = 'roothide/Bootstrap';
            const apiURL = `https://api.github.com/repos/${upstreamRepo}/releases/latest`;
            const releaseFilePath = path.join(process.env.GITHUB_WORKSPACE, 'latest_release.txt');
            const markdownTablePath = path.join(process.env.GITHUB_WORKSPACE, 'RELEASES.md');

            async function getLatestRelease() {
              try {
                const response = await axios.get(apiURL);
                const fixedItems = response.data.body.match(/(?<=\bFixed\b\s*.*?)(\d+.*?)(?=\n|$)/gi) || [];
                return {
                  tagName: response.data.tag_name,
                  publishedDate: response.data.published_at,
                  fixedItems: fixedItems.join(', ')
                };
              } catch (error) {
                console.error(`Unable to get latest release: ${error}`);
                return null;
              }
            }

            const latestRelease = await getLatestRelease();
            if (latestRelease) {
              const releaseData = {
                tagName: latestRelease.tagName,
                publishedDate: new Date(latestRelease.publishedDate).toISOString(),
                fixedItems: latestRelease.fixedItems
              };
              
              fs.writeFileSync(releaseFilePath, JSON.stringify(releaseData));

              console.log(`Latest release tag: ${latestRelease.tagName}`);
              return releaseData;
            } else {
              return;
            }

      - name: Update Markdown Table
        if: steps.check-release.outputs.result
        run: node .github/scripts/update-markdown-table.js

      - name: Create Issue with release information
        if: steps.check-release.outputs.result
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const releaseInfos = JSON.parse(fs.readFileSync('${{ env.GITHUB_WORKSPACE }}/latest_release.txt', 'utf8'));
            const issueTitle = `New Release: ${releaseInfos.tagName}`;
            const issueBody = `### New Release Info
            - Release Tag: ${releaseInfos.tagName}
            - Published Date: ${releaseInfos.publishedDate}
            - Fixed Items: ${releaseInfos.fixedItems}`;
            
            github.issues.cre
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: issueBody,
            });
