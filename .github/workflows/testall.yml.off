name: Upstream Release Notifier

on:
  workflow_dispatch:
  schedule:
    - cron: '0 * * * *'

jobs:
  check-upstream-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install axios
        run: npm install axios

      - name: Check for new release
        id: check-release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const axios = require('axios');
            const fs = require('fs');
            const path = require('path');
            const markdownTable = require('markdown-table');

            const upstreamRepo = 'roothide/Bootstrap';
            const apiURL = `https://api.github.com/repos/${upstreamRepo}/releases/latest`;
            const releaseFilePath = path.join(process.env.GITHUB_WORKSPACE, 'latest_release.txt');

            async function getLatestRelease() {
              try {
                const response = await axios.get(apiURL);
                const fixedMatch = response.data.body.match(/(?<=\bFixed\b\s*.*?)(\d+.*?)(?=\n|$)/gi) || [];
                const fixedItems = fixedMatch.map(item => item.trim());
                return {
                  tagName: response.data.tag_name,
                  publishedDate: response.data.published_at,
                  fixedItems: fixedItems
                };
              } catch (error) {
                console.error(`Unable to get latest release: ${error}`);
                return null;
              }
            }

            function createMarkdownTable(items) {
              const tableHeader = ['Issue Number', 'Description'];
              const tableData = items.map(item => {
                const [issue, ...descriptionParts] = item.split(/\s+/, 2);
                return [issue, descriptionParts.join(' ')];
              });
              return markdownTable([tableHeader, ...tableData]);
            }

            async function run() {
              const latestReleaseData = await getLatestRelease();
              if (!latestReleaseData) return;

              const { tagName, publishedDate, fixedItems } = latestReleaseData;
              const markdownReleaseTable = createMarkdownTable(fixedItems);

              let releaseInfo = `## New Release ${tagName}\n` +
                                `**Published Date:** ${publishedDate}\n` +
                                `### Fixed Issues\n` +
                                `${markdownReleaseTable}\n`;

              let previousRelease = '';
              if (fs.existsSync(releaseFilePath)) {
                previousRelease = fs.readFileSync(releaseFilePath, 'utf8');
              }

              // Compare and perform necessary actions (left out for brevity)
              // ...

              // Write current release tag to file
              fs.writeFileSync(releaseFilePath, tagName);
            }

            run();
