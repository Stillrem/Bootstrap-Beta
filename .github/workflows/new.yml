name: Release Notification

on:
  workflow_dispatch:
  schedule:
    - cron: '0 * * * *'

jobs:
  check-upstream-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install axios
        run: npm install axios

      - name: Check for New Release
        id: check-release
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const axios = require('axios');
            const fs = require('fs');
            const path = require('path');
            const { exec: execChildProcess } = require('child_process');

            const upstreamRepo = 'roothide/Bootstrap';
            const apiURL = `https://api.github.com/repos/${upstreamRepo}/releases/latest`;
            const releaseFilePath = path.join(process.env.GITHUB_WORKSPACE, 'latest_release.txt');

            async function getLatestRelease() {
              try {
                const response = await axios.get(apiURL);
                return response.data.tag_name;
              } catch (error) {
                console.error(`Failed to fetch the latest release: ${error}`);
                return null;
              }
            }

            function getChangedFiles(previousTag, currentTag) {
              return new Promise((resolve, reject) => {
                const command = `git diff --name-status ${previousTag}..${currentTag}`;
                execChildProcess(command, (error, stdout, stderr) => {
                  if (error) {
                    reject(stderr);
                  }
                  resolve(stdout.trim().split('\n'));
                });
              });
            }

            function generateChangeLog(changedFiles) {
              const tableHeader = `| File | Change Type |\n| --- | --- |`;
              const tableRows = changedFiles.map(file => {
                const [type, name] = file.split('\t');
                return `| ${name} | ${type} |`;
              }).join('\n');

              return `${tableHeader}\n${tableRows}`;
            }

            async function run() {
              const latestRelease = await getLatestRelease();
              if (!latestRelease) return;

              let previousRelease = '';
              if (fs.existsSync(releaseFilePath)) {
                previousRelease = fs.readFileSync(releaseFilePath, 'utf8');
              }

              if (latestRelease !== previousRelease) {
                fs.writeFileSync(releaseFilePath, latestRelease, 'utf8');
                console.log(`Found a new release: ${latestRelease}`);

                if (previousRelease) {
                  const changedFiles = await getChangedFiles(previousRelease, latestRelease);
                  const changeLog = generateChangeLog(changedFiles);
                  console.log('Change Log:\n', changeLog);
                  // Дополнительно можно установить changeLog как выходное значение
                  core.setOutput('change-log', changeLog);
                }

                core.setOutput('new-release', latestRelease);
              } else {
                console.log(`No new releases found. The latest release is still: ${previousRelease}`);
              }
            }

            run();
