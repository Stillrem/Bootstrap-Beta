name: Upstream Release Notifier

on:
  workflow_dispatch:
  schedule:
    - cron: '0 12 * * *'

jobs:
  check-upstream-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Check for new release
        id: check-release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { getOctokit, context } = require('@actions/github');
            const fs = require('fs');
            const path = require('path');

            const octokit = getOctokit(process.env.GITHUB_TOKEN);
            const upstreamRepo = 'roothide/Bootstrap';
            const [owner, repo] = upstreamRepo.split('/');
            const releaseFilePath = path.join(process.env.GITHUB_WORKSPACE, 'latest_release.txt');

            async function getLatestRelease() {
              try {
                const response = await octokit.repos.getLatestRelease({
                  owner,
                  repo
                });
                return response.data.tag_name;
              } catch (error) {
                console.error(`Unable to get latest release: ${error}`);
                return null;
              }
            }

            async function run() {
              const latestRelease = await getLatestRelease();
              if (!latestRelease) return;

              let previousRelease = '';
              if (fs.existsSync(releaseFilePath)) {
                previousRelease = fs.readFileSync(releaseFilePath, 'utf8');
              }

              if (latestRelease !== previousRelease) {
                fs.writeFileSync(releaseFilePath, latestRelease, 'utf8');
                console.log(`New release found: ${latestRelease}`);

                // Here you would continue your code for handling a new release.
                // For example, opening an issue using the octokit.rest.issues.create method
              }
            }

            run();
