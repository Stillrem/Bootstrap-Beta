name: Upstream Release Notifier

on:
  workflow_dispatch:
  schedule:
    - cron: '0 * * * *'

jobs:
  check-upstream-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install axios
        run: npm install axios

      - name: Check for new release
        id: check-release
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const axios = require('axios');
            const fs = require('fs');
            const path = require('path');
            const core = require('@actions/core');
            const github = require('@actions/github');

            const upstreamRepo = 'roothide/Bootstrap';
            const apiURL = `https://api.github.com/repos/${upstreamRepo}/releases/latest`;
            const releaseFilePath = path.join(process.env.GITHUB_WORKSPACE, 'latest_release.txt');

            async function getLatestRelease() {
              try {
                const response = await axios.get(apiURL);
                return response.data.tag_name;
              } catch (error) {
                core.setFailed(`Unable to get latest release: ${error}`);
                return null;
              }
            }

            async function run() {
              const latestRelease = await getLatestRelease();
              if (!latestRelease) return;

              let previousRelease = '';
              if (fs.existsSync(releaseFilePath)) {
                previousRelease = fs.readFileSync(releaseFilePath, 'utf8');
              }

              if (latestRelease !== previousRelease) {
                fs.writeFileSync(releaseFilePath, latestRelease, 'utf8');
                core.info(`New release found: ${latestRelease}`);

                const issueBody = `New release found: ${latestRelease}`;
                const issueTitle = `New Release: ${latestRelease}`;

                const octokit = github.getOctokit(core.getInput('github-token'));
                const context = github.context;

                await octokit.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: issueTitle,
                  body: issueBody,
                });

                core.info(`Issue created for release: ${latestRelease}`);
              } else {
                core.info(`No new release found. Latest known release: ${previousRelease}`);
              }
            }

            // Run the function
            run();
